<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[测试1]]></title>
      <url>%2F2016%2F05%2F29%2F%E6%B5%8B%E8%AF%951%2F</url>
      <content type="text"><![CDATA[通过在行首插入 1 到 6 个 # (如#大)，来定义对应的 1 到 6 阶 标题： 大大大在 Markdown 中段落由一行或者多行文本组成，相邻的两行文字会被视为同一段落，如果存在空行则被视为不同段落( Markdown 对空行的定义是看起来是空行就是空行，即使空行中存在 空格 TAB 回车 等不可见字符，同样会被视为空行)。 第一行 两行之间存在空行，视为不同段落。 链接的语法为[链接名称]然后紧跟（链接） 豆瓣 Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： http://www.douban.com 图片的语法为![图片名称]然后紧跟（图片链接） 倾斜粗体 删除线 这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字这是引用文字 项目 项目 项目 子项目 子项目 项目 * 项目 项目 项目 子项目 子项目 项目 * *Hi* 一句话行内代码一句话。 多行代码使用 3 个反引号来标记(反引号一般位于键盘左上角，要用英文) ，在第一个 ｀｀｀ 后面可以跟语言类型，没有语言类型可以省略不写: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273export default &#123; [type.ADDEVENT](states, obj)&#123; states.count++; obj.items.id = states.count; states.event.unshift(obj.items); func.local.set(states); &#125;, [type.EVENTDONE](states, obj)&#123; for (let i = 0; i &lt; states.event.length; i++) &#123; if (states.event[i].id === obj.id) &#123; states.event[i].type = 2; states.event[i].time = func.getDate(); var item = states.event[i]; states.event.splice(i, 1); break; &#125; &#125; states.event.unshift(item); func.local.set(states); &#125;, [type.EVENTTODO](states, obj)&#123; for (let i = 0; i &lt; states.event.length; i++) &#123; if (states.event[i].id === obj.id) &#123; states.event[i].type = 1; var item = states.event[i]; states.event.splice(i, 1); break; &#125; &#125; states.event.unshift(item); func.local.set(states); &#125;, [type.EVENTCANCEL](states, obj)&#123; for (let i = 0; i &lt; states.event.length; i++) &#123; if (states.event[i].id === obj.id) &#123; states.event[i].type = 3; var item = states.event[i]; states.event.splice(i, 1); break; &#125; &#125; states.event.unshift(item); func.local.set(states); &#125;, [type.CLEAREVENT](states)&#123; states.event = []; func.local.clear(); &#125;, [type.DELEVENT](states, info)&#123; if (states.event[info.index].id === info.id) &#123; states.event.splice(info.index, 1); &#125; else &#123; states.event.filter(function (d, i) &#123; if (d.id == info.id) &#123; states.event.splice(i, 1); &#125; &#125;) &#125; func.local.set(states); &#125;, [type.EDITEVENT](states, info)&#123; if (states.event[info.index].id === info.id) &#123; states.event[info.index].content = info.content; &#125; else &#123; states.event.filter(function (d) &#123; if (d.id == info.id) &#123; d.content = info.content; &#125; &#125;) &#125; func.local.set(states); &#125;&#125; 1$ hexo new "My New Post"]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[My New Post]]></title>
      <url>%2F2016%2F05%2F28%2FMy-New-Post%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F05%2F28%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
